version: '3.8'

services:
  # Redis service for caching
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - rag_network

  # ROS2 RAG Service
  rag_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag_service_node
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
    volumes:
      # Mount the package sources for development (optional)
      - ./rag_interfaces:/ros2_ws/src/rag_interfaces
      - ./rag_service:/ros2_ws/src/rag_service
      # Persist vector databases
      - vector_dbs:/ros2_ws/src/rag_service/data/vector_dbs
    networks:
      - rag_network
    stdin_open: true
    tty: true
    command: ros2 launch rag_service rag_service_launch.py

  # Optional: Example client for testing
  rag_client:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag_client
    depends_on:
      - rag_service
    environment:
      - ROS_DOMAIN_ID=0
    networks:
      - rag_network
    stdin_open: true
    tty: true
    command: ros2 run rag_service rag_client_example
    profiles:
      - client  # Only start with: docker-compose --profile client up

volumes:
  redis_data:
    driver: local
  vector_dbs:
    driver: local

networks:
  rag_network:
    driver: bridge
